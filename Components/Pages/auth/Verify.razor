@* GLORIA's *@
@page "/auth/verify"
@layout NoSidebar

@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore;
@using Managemate.Models
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager
@inject ManageMateDBConetxt DbContext
@inject IJSRuntime JS
@rendermode InteractiveServer


<PageTitle>Verify</PageTitle>

<style>
    .main-content {
        margin-top: 70px;
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: calc(100vh - 50px);
        padding: 2rem;
    }

    h1 {
        text-align: center;
        color: #333;
        margin: 2rem 0;
        font-weight: 600;
        font-size: 1rem;
    }

    .page {
        width: 100%;
        max-width: 436px;
        background: #f3fff8;
        border-radius: 10px;
        padding: 30px
    }

    .otp-container {
        display: flex;
        justify-content: space-between;
        margin: 2rem 0;
        gap: 1rem;
    }

    .otp-input {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        border: 0;
        text-align: center;
        font-size: 1rem;
        background-color: #adf0d1;
    }

    .timer {
        text-align: center;
        font-size: 0.9rem;
        margin: 1rem 0;
        font-weight: 500;
    }

    .resend-btn {

        border-radius: 20px;
        padding: 7px;
        font-size: 11px;
        height: 30px;
        border-bottom-width: 5px;
        border-color: #000;
        border-bottom-color: #2dad9d;
        width: 100px;
    }
</style>

<script>
    function startTimer() {
        let timeLeft = 59;
        const timerElement = document.querySelector('.timer');
        const timer = setInterval(() => {
            if (timeLeft >= 0) {
                timerElement.textContent = `00:${timeLeft.toString().padStart(2, '0')}`;
                timeLeft--;
            } else {
                clearInterval(timer);
                timerElement.textContent = "Expired";
            }
        }, 1000);
    }

    function resetTimer() {
        const timerElement = document.querySelector('.timer');
        timerElement.textContent = "00:59";
        startTimer();
    }

    function setupOtpInputs() {
        const otpInputs = document.querySelectorAll('.otp-input');
        const form = document.querySelector('#otpForm');

        otpInputs.forEach((input, index) => {
            input.addEventListener('input', (e) => {
                if (e.target.value && index < otpInputs.length - 1) {
                    otpInputs[index + 1].focus();
                }

                if (index === otpInputs.length - 1 && e.target.value) {
                    const isAllFilled = Array.from(otpInputs).every(input => input.value.trim() !== '');
                    if (isAllFilled) {
                        form.dispatchEvent(new Event('submit'));
                    }
                }
            });
        });
    }

    window.getEnteredOTP = function () {
        const otpInputs = document.querySelectorAll('.otp-input');
        return Array.from(otpInputs).map(input => input.value).join('');
    };
</script>

<div class="main-content">
    <div class="page" id="otpPage">
        <h1>ENTER OTP SENT TO YOUR EMAIL</h1>
        <form @onsubmit="VerifyOTP" id="otpForm">
            <div class="otp-container">
                <input type="text" maxlength="1" class="otp-input" required />
                <input type="text" maxlength="1" class="otp-input" required />
                <input type="text" maxlength="1" class="otp-input" required />
                <input type="text" maxlength="1" class="otp-input" required />
            </div>
            <div class="timer">00:59</div>

            <div class="w-100 d-flex justify-content-center">

                <button type="button" class="resend-btn" @* @onclick="ResendOTP" *@>RESEND</button>
            </div>
            @* <button type="submit" class="submit-btn">VERIFY</button> *@
        </form>
    </div>
</div>


@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("startTimer");
            await JS.InvokeVoidAsync("setupOtpInputs");
        }
    }

    @*  private async Task ResendOTP()
    {
        await JS.InvokeVoidAsync("alert", "A new OTP has been sent to your email.");
        generatedOTP = GenerateOTP(); 
        await JS.InvokeVoidAsync("resetTimer"); 
    } *@

    private async Task VerifyOTP()
    {
        var enteredOTP = await JS.InvokeAsync<string>("getEnteredOTP");

        if (string.IsNullOrEmpty(enteredOTP) || enteredOTP.Length != 4)
        {
            await JS.InvokeVoidAsync("alert", "Please enter a valid 4-digit OTP.");
            return;
        }


        string userId = await JS.InvokeAsync<string>("getCookie", "userId");

        Console.WriteLine($"The USER ID FROM COOKIE {userId}");

        var user = await DbContext.Users.FirstOrDefaultAsync(u => u.UserId == userId);

        if (user == null)
        {
            await JS.InvokeVoidAsync("alert", "Failed.");
            return;
        }


        if (enteredOTP != user.Otp.ToString())
        {
            await JS.InvokeVoidAsync("alert", "Invalid OTP. Please try again.");
            return;
        }

        user.Otp = null;
        await DbContext.SaveChangesAsync();


        switch (user.UserType)
        {
            case UserType.Employee:
                NavigationManager.NavigateTo("/employee/skills", forceLoad: true);
                break;
            case UserType.TaskManager:
                NavigationManager.NavigateTo("/profile", forceLoad: true);
                break;
            case UserType.Admin:
                NavigationManager.NavigateTo("/admin/dashboard", forceLoad: true);
                break;
        }
    }

}