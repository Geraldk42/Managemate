@page "/admin/departments"
@layout AdminDashboardLayout
@rendermode InteractiveServer
@using Managemate.Models
@using Microsoft.EntityFrameworkCore;
@inject ManageMateDBConetxt DbContext
@inject NavigationManager Navigation

<h3 style="color: #9CEACD;">Departments</h3>

<button class="btn btn-success" @onclick="ShowAddDepartmentModal">Add Department</button>

@if (departments == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Department Name</th>
                <th>Manager Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var dept in departments)
            {
                <tr>
                    <td>@dept.Name</td>
                    <td>@dept.ManagerName</td>
                    <td>
                        <button class="btn btn-sm btn-info" @onclick="() => ShowEditDepartmentModal(dept)">Edit</button>
                        <button class="btn btn-sm btn-dark" @onclick="() => DeleteDepartment(dept.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (showAddModal || showEditModal)
{
    <div class="modal-overlay">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(showEditModal ? "Edit Department" : "Add Department")</h5>
                    <button type="button" class="close" @onclick="CloseModal">&times;</button>
                </div>
                <div class="modal-body">
                    <label>Department Name</label>
                    <input type="text" @bind="selectedDepartment.Name" class="form-control" />
                    <label>Manager Name</label>
                    <input type="text" @bind="selectedDepartment.ManagerName" class="form-control" />
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                    <button class="btn btn-primary" @onclick="SaveDepartment">Save</button>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .modal-dialog {
        background: #fff;
        padding: 20px;
        border-radius: 5px;
        width: 400px;
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .close {
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
    }
</style>

@code {
    private List<Department> departments;
    private Department selectedDepartment = new Department();
    private bool showAddModal = false;
    private bool showEditModal = false;

    protected override async Task OnInitializedAsync()
    {
        departments = await DbContext.Departments.ToListAsync();
    }

    private void ShowAddDepartmentModal()
    {
        selectedDepartment = new Department();
        showAddModal = true;
        showEditModal = false;
    }

    private void ShowEditDepartmentModal(Department dept)
    {
        selectedDepartment = new Department
        {
            Id = dept.Id,
            Name = dept.Name,
            ManagerName = dept.ManagerName
        };
        showEditModal = true;
        showAddModal = false;
    }

    private void CloseModal()
    {
        showAddModal = false;
        showEditModal = false;
    }

    private async Task SaveDepartment()
    {
        if (showAddModal)
        {
            DbContext.Departments.Add(selectedDepartment);
        }
        else if (showEditModal)
        {
            DbContext.Departments.Update(selectedDepartment);
        }
        await DbContext.SaveChangesAsync();
        departments = await DbContext.Departments.ToListAsync();
        showAddModal = false;
        showEditModal = false;
    }

    private async Task DeleteDepartment(int id)
    {
        var department = await DbContext.Departments.FindAsync(id);
        if (department != null)
        {
            DbContext.Departments.Remove(department);
            await DbContext.SaveChangesAsync();
        }
        departments = await DbContext.Departments.ToListAsync();
    }
}
