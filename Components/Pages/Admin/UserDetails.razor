@page "/admin/overview/{UserId}"
@layout AdminDashboardLayout
@rendermode InteractiveServer
@inject ManageMateDBConetxt DbContext
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@using Managemate.Models
@using Microsoft.EntityFrameworkCore

<PageTitle>User Details</PageTitle>

<style>
    .user-details-container {
        max-width: 1200px;
        margin: 0 auto;
    }

    .user-header {
        display: flex;
        align-items: center;
        margin-bottom: 30px;
    }

    .user-avatar {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        background-color: #9CEACD;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 32px;
        color: white;
        margin-right: 20px;
    }

    .user-info h2 {
        margin-bottom: 5px;
    }

    .badge-role {
        padding: 5px 10px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: normal;
    }

    .badge-admin {
        background-color: #dc3545;
        color: white;
    }

    .badge-manager {
        background-color: #2A9D8F;
        color: white;
    }

    .badge-employee {
        background-color: #9CEACD;
        color: white;
    }

    .card-section {
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        padding: 20px;
        margin-bottom: 20px;
    }

    .card-header {
        font-weight: 600;
        margin-bottom: 15px;
        color: #333;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .detail-row {
        display: flex;
        margin-bottom: 15px;
    }

    .detail-label {
        width: 150px;
        font-weight: 500;
        color: #666;
    }

    .detail-value {
        flex: 1;
    }

    .task-card {
        border: 1px solid #eee;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 10px;
    }

    .meeting-card {
        border: 1px solid #eee;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 10px;
    }

    .task-status {
        display: inline-block;
        padding: 3px 8px;
        border-radius: 12px;
        font-size: 12px;
        margin-right: 10px;
    }

    .skills-container {
        display: flex;
        flex-wrap: wrap;
        gap: 5px;
    }

    .skill-badge {
        background-color: #f0f0f0;
        padding: 5px 10px;
        border-radius: 15px;
        font-size: 12px;
    }

    .tab-container {
        margin-bottom: 20px;
    }

    .tab-buttons {
        display: flex;
        border-bottom: 1px solid #ddd;
        margin-bottom: 20px;
    }

    .tab-button {
        padding: 10px 20px;
        background: none;
        border: none;
        cursor: pointer;
        font-weight: 500;
    }

    .tab-button.active {
        border-bottom: 3px solid #2A9D8F;
        color: #2A9D8F;
    }

    .back-button {
        margin-bottom: 20px;
        display: inline-flex;
        align-items: center;
        gap: 5px;
        text-decoration: none;
        color: #666;
    }

    .back-button:hover {
        color: #2A9D8F;
    }

    .work-log {
        border-bottom: 1px solid #eee;
        padding: 10px 0;
    }

    .work-log:last-child {
        border-bottom: none;
    }
    
    .session-item {
        background-color: #f9f9f9;
        border-radius: 4px;
        padding: 8px;
        margin-bottom: 5px;
    }
</style>

<div class="user-details-container">
    <a href="/admin/dashboard" class="back-button">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-left" viewBox="0 0 16 16">
            <path fill-rule="evenodd" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8z"/>
        </svg>
        Back to Users
    </a>

    @if (isLoading)
    {
        <div class="d-flex justify-content-center align-items-center" style="height: 300px;">
            <div class="spinner-border text-success" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (user == null)
    {
        <div class="alert alert-danger">User not found</div>
    }
    else
    {
        <div class="user-header">
            <div class="user-avatar">
                @(user.Email.Substring(0, 1).ToUpper())
            </div>
            <div class="user-info">
                <h2>@user.Email.Split('@')[0]</h2>
                <div>
                    <span class="badge badge-role @GetRoleBadgeClass(user.UserType)">
                        @user.UserType
                    </span>
                    <span class="text-muted ms-2">@user.Email</span>
                </div>
            </div>
        </div>

        <div class="tab-container">
           <div class="tab-buttons">
    <button class="tab-button @(currentTab == "profile" ? "active" : "")" @onclick="@(e => SetCurrentTab("profile"))">
        Profile
    </button>
    <button class="tab-button @(currentTab == "tasks" ? "active" : "")" @onclick="@(e => SetCurrentTab("tasks"))">
        Tasks
    </button>
    <button class="tab-button @(currentTab == "meetings" ? "active" : "")" @onclick="@(e => SetCurrentTab("meetings"))">
        Meetings
    </button>
    <button class="tab-button @(currentTab == "work-logs" ? "active" : "")" @onclick="@(e => SetCurrentTab("work-logs"))">
        Work Logs
    </button>
</div>

            @if (currentTab == "profile")
            {
                <div class="card-section">
                    <h5 class="card-header">User Information</h5>
                    
                    <div class="detail-row">
                        <div class="detail-label">User ID</div>
                        <div class="detail-value">@user.UserId</div>
                    </div>
                    
                    <div class="detail-row">
                        <div class="detail-label">Email</div>
                        <div class="detail-value">@user.Email</div>
                    </div>
                    
                    <div class="detail-row">
                        <div class="detail-label">Role</div>
                        <div class="detail-value">@user.UserType</div>
                    </div>
                    
                    <div class="detail-row">
                        <div class="detail-label">Joined On</div>
                        <div class="detail-value">@user.JoinedOn.ToString("MMMM dd, yyyy")</div>
                    </div>
                    
                    <div class="detail-row">
                        <div class="detail-label">Min. Working Hours</div>
                        <div class="detail-value">@user.MinWorkingHours hours</div>
                    </div>
                </div>
                
                <div class="card-section">
                    <h5 class="card-header">Skills</h5>
                    <div class="skills-container">
                        @if (!string.IsNullOrEmpty(user.Skills))
                        {
                            foreach (var skill in user.Skills.Split(','))
                            {
                                <span class="skill-badge">@skill</span>
                            }
                        }
                        else
                        {
                            <p>No skills added yet</p>
                        }
                    </div>
                </div>
            }
            else if (currentTab == "tasks")
            {
                <div class="card-section">
                    <h5 class="card-header">
                        Tasks
                        <span class="badge bg-secondary">@(userTasks.Count)</span>
                    </h5>
                    
                    @if (userTasks.Count == 0)
                    {
                        <p>No tasks assigned to this user</p>
                    }
                    else
                    {
                        foreach (var task in userTasks)
                        {
                            <div class="task-card">
                                <h6>@task.Name</h6>
                                <p>@task.Description</p>
                                <div>
                                    <span class="task-status @GetTaskStatusClass(task.Status)">@task.Status</span>
                                    <small class="text-muted">Due: @task.Deadline.ToShortDateString()</small>
                                </div>
                                @if (task.Rating.HasValue)
                                {
                                    <div class="mt-2">
                                        <strong>Rating:</strong> @task.Rating/5
                                    </div>
                                }
                                @if (!string.IsNullOrEmpty(task.Review))
                                {
                                    <div class="mt-2">
                                        <strong>Review:</strong> @task.Review
                                    </div>
                                }
                            </div>
                        }
                    }
                </div>
            }
            else if (currentTab == "meetings")
            {
                <div class="card-section">
                    <h5 class="card-header">
                        Meetings
                        <span class="badge bg-secondary">@(userMeetings.Count)</span>
                    </h5>
                    
                    @if (userMeetings.Count == 0)
                    {
                        <p>No meetings for this user</p>
                    }
                    else
                    {
                        foreach (var meeting in userMeetings)
                        {
                            <div class="meeting-card">
                                <h6>@meeting.Agenda</h6>
                                <small class="text-muted">@meeting.Date.ToString("MMMM dd, yyyy - HH:mm")</small>
                                @if (meeting.OwnerId == user.UserId)
                                {
                                    <span class="badge bg-info ms-2">Organizer</span>
                                }
                                else
                                {
                                    <span class="badge bg-secondary ms-2">Participant</span>
                                }
                            </div>
                        }
                    }
                </div>
            }
            else if (currentTab == "work-logs")
            {
                <div class="card-section">
                    <h5 class="card-header">
                        Work Logs
                        <span class="badge bg-secondary">@(workLogs.Count)</span>
                    </h5>
                    
                    @if (workLogs.Count == 0)
                    {
                        <p>No work logs recorded</p>
                    }
                    else
                    {
                        <div class="detail-row font-weight-bold">
                            <div class="detail-label">Date</div>
                            <div class="detail-value">Sessions</div>
                        </div>
                        
                        @foreach (var log in workLogs)
                        {
                            <div class="work-log">
                                <div class="detail-row">
                                    <div class="detail-label">@log.LogDate.ToString("MMMM dd, yyyy")</div>
                                    <div class="detail-value">
                                        @foreach (var session in log.Sessions)
                                        {
                                            <div class="session-item">
                                                <strong>Check-in:</strong> @session.CheckInTime.ToString("HH:mm")
                                                @if (session.CheckoutTime.HasValue)
                                                {
                                                    <span>
                                                        <strong>Check-out:</strong> @session.CheckoutTime.Value.ToString("HH:mm")
                                                        <span class="ms-2">
                                                            (@((session.CheckoutTime.Value - session.CheckInTime).TotalHours.ToString("F1")) hours)
                                                        </span>
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="text-warning ms-2">(Still active)</span>
                                                }
                                            </div>
                                        }
                                        <div class="mt-2">
                                            <strong>Total time:</strong> @(log.TotalMinutesWorked / 60) hours @(log.TotalMinutesWorked % 60) minutes
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        
                        <div class="mt-3">
                            <div class="detail-row">
                                <div class="detail-label">Total Minutes</div>
                                <div class="detail-value">@workLogs.Sum(l => l.TotalMinutesWorked) minutes</div>
                            </div>
                            <div class="detail-row">
                                <div class="detail-label">Total Hours</div>
                                <div class="detail-value">@(workLogs.Sum(l => l.TotalMinutesWorked) / 60) hours @(workLogs.Sum(l => l.TotalMinutesWorked) % 60) minutes</div>
                            </div>
                            <div class="detail-row">
                                <div class="detail-label">Average per Day</div>
                                <div class="detail-value">@(workLogs.Any() ? (workLogs.Sum(l => l.TotalMinutesWorked) / 60.0 / workLogs.Count).ToString("F1") : "0") hours</div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public string UserId { get; set; }

    private User user;
    private bool isLoading = true;
    private string currentTab = "profile";
    
    private List<TaskToDo> userTasks = new();
    private List<Meeting> userMeetings = new();
    private List<WorkLog> workLogs = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            string loggedInUserType = await JS.InvokeAsync<string>("getCookie", "userType");

            if (string.IsNullOrEmpty(loggedInUserType) || loggedInUserType != UserType.Admin.ToString())
            {
                NavigationManager.NavigateTo("/profile");
                return;
            }

            await LoadUserData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user details: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadUserData()
    {

        user = await DbContext.Users.FirstOrDefaultAsync(u => u.UserId == UserId);
        
        if (user != null)
        {

            if (user.UserType == UserType.Employee)
            {
                var userTaskAssignments = await DbContext.UserTasks
                    .Where(ut => ut.AssignedEmployeeId == UserId)
                    .ToListAsync();
                
                var taskIds = userTaskAssignments.Select(ut => ut.TaskId).ToList();
                
                userTasks = await DbContext.TasksToDo
                    .Where(t => taskIds.Contains(t.TaskId))
                    .ToListAsync();
            }

            else if (user.UserType == UserType.TaskManager)
            {
                userTasks = await DbContext.TasksToDo
                    .Where(t => t.CreatedById == UserId)
                    .ToListAsync();
            }
            

            var meetingParticipations = await DbContext.MeetingParticipants
                .Where(mp => mp.ParticipantId == UserId)
                .ToListAsync();
                
            var meetingIds = meetingParticipations.Select(mp => mp.MeetingId).ToList();
            
            var participatingMeetings = await DbContext.Meetings
                .Where(m => meetingIds.Contains(m.Id))
                .ToListAsync();
                
            var createdMeetings = await DbContext.Meetings
                .Where(m => m.OwnerId == UserId)
                .ToListAsync();
                
            userMeetings = participatingMeetings.Union(createdMeetings).ToList();
            

            workLogs = await DbContext.WorkLogs
                .Where(wl => wl.EmployeeId == UserId)
                .Include(wl => wl.Sessions)
                .OrderByDescending(wl => wl.LogDate)
                .ToListAsync();
        }
    }

    private void SetCurrentTab(string tab)
    {
        currentTab = tab;
    }

    private string GetRoleBadgeClass(UserType userType)
    {
        return userType switch
        {
            UserType.Admin => "badge-admin",
            UserType.TaskManager => "badge-manager",
            UserType.Employee => "badge-employee",
            _ => ""
        };
    }

    private string GetTaskStatusClass(STATUSENUM status)
    {
        return status switch
        {
            STATUSENUM.UnAssigned => "bg-secondary",
            STATUSENUM.InProgress => "bg-warning",
            STATUSENUM.Complete => "bg-success",
            STATUSENUM.Reviewed => "bg-primary",
            _ => "bg-secondary"
        };
    }
}