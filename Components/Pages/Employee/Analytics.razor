@page "/employee/analytics"
@layout UserDashboardLayout
@rendermode InteractiveServer
@inject ManageMateDBConetxt DbContext
@inject IJSRuntime JS
@using Managemate.Models
@using Microsoft.EntityFrameworkCore
@using System.Text.Json

<PageTitle>My Performance Analytics</PageTitle>

<style>
    .analytics-body {
        margin-top: 70px;
        font-family: Arial, sans-serif;
        background-color: #f5f6fa;
        color: #fff;
        padding: 20px;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .info-box {
        background-color: white;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 20px;
        width: 90%;
        max-width: 800px;
        color: #333;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .info-box h3 {
        color: #2dad9d;
        margin-top: 0;
    }

    .metrics-container {
        display: flex;
        justify-content: space-around;
        flex-wrap: wrap;
        gap: 10px;
    }

    .metric {
        text-align: center;
        padding: 10px;
        background-color: #f9f9f9;
        border-radius: 8px;
        min-width: 120px;
    }

    .metric-value {
        font-size: 24px;
        font-weight: bold;
        color: #00203f;
    }

    .metric-label {
        font-size: 14px;
        color: #666;
    }

    .spinner-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 60vh;
        width: 100%;
    }

    .tasks-container {
        width: 90%;
        max-width: 800px;
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 20px;
        margin-bottom: 20px;
    }

    .task-column {
        background-color: white;
        border-radius: 8px;
        padding: 15px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        color: #333;
    }

    .column-header {
        color: #2dad9d;
        margin-top: 0;
        margin-bottom: 15px;
        font-size: 18px;
        text-align: center;
    }

    .task-item {
        background-color: #f9f9f9;
        padding: 10px;
        margin-bottom: 10px;
        border-radius: 5px;
        border-left: 3px solid #2dad9d;
    }

    .task-name {
        font-weight: bold;
        margin-bottom: 5px;
    }

    .task-deadline {
        font-size: 12px;
        color: #666;
    }

    .rating-display {
        margin-top: 10px;
        display: flex;
        align-items: center;
    }

    .rating-stars {
        color: #ffc107;
        font-size: 18px;
        margin-right: 5px;
    }

    .rating-text {
        color: #666;
        font-size: 14px;
    }

    .rating-badge {
        display: inline-block;
        padding: 3px 8px;
        border-radius: 10px;
        color: white;
        font-weight: bold;
        font-size: 12px;
        margin-left: 5px;
    }

    .rating-high {
        background-color: #28a745;
    }

    .rating-medium {
        background-color: #ffc107;
    }

    .rating-low {
        background-color: #dc3545;
    }

    .work-hours-card {
        background-color: white;
        border-radius: 8px;
        padding: 15px;
        margin-top: 20px;
        width: 90%;
        max-width: 800px;
        color: #333;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .work-hours-title {
        color: #2dad9d;
        margin-top: 0;
        margin-bottom: 15px;
        font-size: 18px;
    }

    .hours-table {
        width: 100%;
        border-collapse: collapse;
    }

    .hours-table th,
    .hours-table td {
        padding: 8px;
        text-align: center;
        border-bottom: 1px solid #ddd;
    }

    .hours-table th {
        background-color: #f2f2f2;
    }
</style>

@if (isLoading)
{
    <div class="spinner-container">
        <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (LoggedInUserType == UserType.Employee)
{
    <div class="analytics-body">

        <div class="info-box">
            <h3>My Performance Overview</h3>
            <div class="metrics-container">
                <div class="metric">
                    <div class="metric-value">@totalAssignedTasks</div>
                    <div class="metric-label">Total Tasks</div>
                </div>
                <div class="metric">
                    <div class="metric-value">@completedTasks</div>
                    <div class="metric-label">Completed</div>
                </div>
                <div class="metric">
                    <div class="metric-value">@inProgressTasks</div>
                    <div class="metric-label">In Progress</div>
                </div>
                <div class="metric">
                    <div class="metric-value">
                        @(averageRating > 0 ? averageRating.ToString("0.0") : "0.0")
                    </div>
                    <div class="metric-label">Avg. Rating</div>
                </div>
                <div class="metric">
                    <div class="metric-value">
                        @((totalMinutesWorked / 60.0).ToString("0.0"))
                    </div>
                    <div class="metric-label">Hours Worked</div>
                </div>
            </div>
        </div>

        <div class="tasks-container">
            <div class="task-column">
                <h4 class="column-header">In Progress Tasks</h4>
                @if (inProgressTasksList.Any())
                {
                    @foreach (var task in inProgressTasksList)
                    {
                        <div class="task-item">
                            <div class="task-name">@task.Name</div>
                            <div class="task-deadline">Due: @task.Deadline.ToString("MMM dd, yyyy")</div>
                        </div>
                    }
                }
                else
                {
                    <p class="text-center text-muted">No tasks in progress</p>
                }
            </div>

            <div class="task-column">
                <h4 class="column-header">Completed Tasks</h4>
                @if (completedTasksList.Any())
                {
                    @foreach (var task in completedTasksList)
                    {
                        <div class="task-item">
                            <div class="task-name">@task.Name</div>
                            @if (task.Rating.HasValue)
                            {
                                <div class="rating-display">
                                    <span class="rating-stars">
                                        @for (int i = 0; i < task.Rating.Value; i++)
                                        {
                                            <span>★</span>
                                        }
                                        @for (int i = task.Rating.Value; i < 4; i++)
                                        {
                                            <span style="color: #ccc;">★</span>
                                        }
                                    </span>
                                    <span class="rating-badge @GetRatingClass(task.Rating.Value)">
                                        @task.Rating.Value/4
                                    </span>
                                </div>
                                @if (!string.IsNullOrEmpty(task.Review))
                                {
                                    <div class="mt-2 small">
                                        <strong>Review:</strong> @task.Review
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="rating-text">Not yet rated</div>
                            }
                        </div>
                    }
                }
                else
                {
                    <p class="text-center text-muted">No completed tasks</p>
                }
            </div>
        </div>

        <div class="work-hours-card">
            <h4 class="work-hours-title">My Work Hours</h4>
            @if (workLogs.Any())
            {
                <table class="hours-table">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Hours Worked</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var log in workLogs.OrderByDescending(w => w.LogDate))
                        {
                            <tr>
                                <td>@log.LogDate.ToString("MMM dd, yyyy")</td>
                                <td>@((log.TotalMinutesWorked / 60.0).ToString("0.0")) hrs</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p class="text-center text-muted">No work logs recorded yet</p>
            }
        </div>
    </div>
}
else
{
    <div class="alert alert-info m-5">
        This page is only available for employees.
    </div>
}

@code {

    @* The code here is VERY similar to what we have in the Analytics.razor file in Manager Side *@

    @*    
    Key Code Similarities
        - Uses the same overall structure as the task manager version
        - Same style & layout as task manager analytics page
        - Same patter for loadeing data
        - Uses a loading spinner while fetching data

    Main Differences
        - Queries filter for the specific employee only
        - Focuses on personal performance instead of management metrics
        - Shows task details directly. No modal
        - Adds visual display of ratings with star icons
        - Includes a work hours history table
    *@


    private bool isLoading = true;
    private string LoggedInUserId;
    private UserType LoggedInUserType;

    private int totalAssignedTasks;
    private int completedTasks;
    private int inProgressTasks;
    private double averageRating;
    private int totalMinutesWorked;

    private List<TaskToDo> inProgressTasksList = new();
    private List<TaskToDo> completedTasksList = new();
    private List<WorkLog> workLogs = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            string userId = await JS.InvokeAsync<string>("getCookie", "userId");
            string userType = await JS.InvokeAsync<string>("getCookie", "userType");

            if (!string.IsNullOrEmpty(userId) && !string.IsNullOrEmpty(userType))
            {
                LoggedInUserId = userId;
                LoggedInUserType = Enum.Parse<UserType>(userType);

                if (LoggedInUserType == UserType.Employee)
                {
                    await LoadEmployeeAnalyticsData();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading analytics: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadEmployeeAnalyticsData()
    {
        try
        {
            var userTasks = await DbContext.UserTasks
            .Where(ut => ut.AssignedEmployeeId == LoggedInUserId)
            .Include(ut => ut.TasksToDo)
            .ToListAsync();

            Console.WriteLine($"Found {userTasks.Count} tasks assigned to employee");

            totalAssignedTasks = userTasks.Count;

            completedTasksList = userTasks
            .Where(ut => ut.TasksToDo.Status == STATUSENUM.Complete || ut.TasksToDo.Status == STATUSENUM.Reviewed)
            .Select(ut => ut.TasksToDo)
            .ToList();

            inProgressTasksList = userTasks
            .Where(ut => ut.TasksToDo.Status == STATUSENUM.InProgress)
            .Select(ut => ut.TasksToDo)
            .ToList();

            completedTasks = completedTasksList.Count;
            inProgressTasks = inProgressTasksList.Count;

            var ratedTasks = completedTasksList.Where(t => t.Rating.HasValue).ToList();
            averageRating = ratedTasks.Any() ? ratedTasks.Average(t => t.Rating.Value) : 0;

            workLogs = await DbContext.WorkLogs
            .Where(wl => wl.EmployeeId == LoggedInUserId)
            .OrderByDescending(wl => wl.LogDate)
            .Take(10)
            .ToListAsync();

            totalMinutesWorked = workLogs.Sum(wl => wl.TotalMinutesWorked);

            Console.WriteLine($"Calculated employee metrics: {completedTasks} completed, {inProgressTasks} in progress");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in LoadEmployeeAnalyticsData: {ex.Message}");
            Console.WriteLine(ex.StackTrace);
        }
    }

    private string GetRatingClass(int rating)
    {
        if (rating >= 3) return "rating-high";
        if (rating >= 2) return "rating-medium";
        return "rating-low";
    }
}